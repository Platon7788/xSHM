#include "../xshm.hpp"
#include <iostream>
#include <thread>
#include <chrono>
#include <string>
#include <random>

int main() {
    try {
        std::cout << "=== XSHM Chat Client Example ===" << std::endl;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —á–∞—Ç–∞
        xshm::XSHMConfig config;
        config.enable_logging = true;
        config.enable_activity_tracking = true;
        config.connection_timeout_ms = 5000;
        
        std::cout << "Connecting to chat server..." << std::endl;
        auto client = xshm::AsyncXSHM<uint32_t>::connect("chat_app", config);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        on_connection_established(client, []() {
            std::cout << "‚úÖ Connected to chat server!" << std::endl;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        on_connection_failed(client, []() {
            std::cout << "‚ùå Failed to connect to chat server" << std::endl;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        on_data_received_sxc(client, [](const uint32_t* message_id) {
            if (message_id) {
                std::cout << "üí¨ Received message ID: " << *message_id << std::endl;
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        on_data_sent_cxs(client, [](const uint32_t* message_id) {
            if (message_id) {
                std::cout << "üì§ Sent message ID: " << *message_id << std::endl;
            }
        });
        
        std::cout << "Chat client is ready. Press Enter to start chatting, 'q' to quit..." << std::endl;
        
        std::string input;
        std::getline(std::cin, input);
        
        if (input == "q" || input == "quit") {
            return 0;
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<uint32_t> message_dist(1000, 9999);
        std::uniform_int_distribution<> delay_dist(3000, 8000);
        
        bool chatting = true;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        std::thread chatting_thread([&]() {
            while (chatting) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                uint32_t message_id = message_dist(gen);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É
                send_cxs(client, message_id);
                
                // –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è (3-8 —Å–µ–∫—É–Ω–¥)
                std::this_thread::sleep_for(std::chrono::milliseconds(delay_dist(gen)));
            }
        });
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        while (true) {
            std::cout << "Press Enter to stop chatting, 'q' to quit: ";
            std::getline(std::cin, input);
            
            if (input == "q" || input == "quit") {
                chatting = false;
                break;
            }
            
            if (input.empty()) {
                chatting = false;
                std::cout << "Chatting stopped." << std::endl;
                break;
            }
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —á–∞—Ç–∞
        if (chatting_thread.joinable()) {
            chatting_thread.join();
        }
        
        std::cout << "Chat client disconnecting..." << std::endl;
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Client Error: " << e.what() << std::endl;
        return 1;
    }
}
