#include "../xshm.hpp"
#include <iostream>
#include <chrono>

// –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –ü–ö (4-8 —è–¥–µ—Ä, 8-32 –ì–ë RAM)
xshm::XSHMConfig create_balanced_config() {
    xshm::XSHMConfig config;
    
    // === –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø ===
    config.max_batch_size = 1;                   // –ë–ï–ó –ë–ê–¢–ß–ò–ù–ì–ê - –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    config.event_loop_timeout_ms = 0;            // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ (0–º—Å)
    config.connection_timeout_ms = 200;          // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    // === –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
    config.min_buffer_size = 256 * 1024;         // 256KB –º–∏–Ω–∏–º—É–º (–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç)
    config.max_buffer_size = 4 * 1024 * 1024;    // 4MB –º–∞–∫—Å–∏–º—É–º (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 8-32 –ì–ë RAM)
    config.callback_thread_pool_size = 8;        // 8 –ø–æ—Ç–æ–∫–æ–≤ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 4-8 —è–¥–µ—Ä)
    
    // === –ù–ê–î–ï–ñ–ù–û–°–¢–¨ ===
    config.enable_logging = false;               // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    config.enable_auto_reconnect = true;         // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    config.enable_activity_tracking = true;      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    config.enable_performance_counters = true;   // –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    config.enable_sequence_verification = true;  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    // === –ë–´–°–¢–†–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ===
    config.max_callback_timeout_ms = 2;          // –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ (2–º—Å)
    config.enable_async_callbacks = true;        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∏
    
    // === –ü–û–í–¢–û–†–ù–´–ï –ü–û–ü–´–¢–ö–ò ===
    config.max_retry_attempts = 3;               // –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    config.initial_retry_delay_ms = 5;           // –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
    config.max_retry_delay_ms = 50;              // –£–º–µ—Ä–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    return config;
}

// –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è DLL (—Å–µ—Ä–≤–µ—Ä) - —Å—Ä–µ–¥–Ω–∏–π –ü–ö
xshm::XSHMConfig create_dll_balanced_config() {
    auto config = create_balanced_config();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è DLL
    config.min_buffer_size = 512 * 1024;         // 512KB –¥–ª—è DLL
    config.max_buffer_size = 8 * 1024 * 1024;    // 8MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è DLL
    config.callback_thread_pool_size = 12;       // 12 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è DLL (–±–æ–ª—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏)
    config.max_callback_timeout_ms = 1;          // –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è DLL
    
    return config;
}

// –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (–∫–ª–∏–µ–Ω—Ç) - —Å—Ä–µ–¥–Ω–∏–π –ü–ö
xshm::XSHMConfig create_app_balanced_config() {
    auto config = create_balanced_config();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    config.min_buffer_size = 256 * 1024;         // 256KB –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    config.max_buffer_size = 4 * 1024 * 1024;    // 4MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    config.callback_thread_pool_size = 6;        // 6 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    config.max_callback_timeout_ms = 2;          // –£–º–µ—Ä–µ–Ω–Ω–æ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–ª–ª–±—ç–∫–∏
    
    return config;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª–∞–±–æ–≥–æ –ü–ö (4 —è–¥—Ä–∞, 8 –ì–ë RAM)
xshm::XSHMConfig create_low_end_config() {
    xshm::XSHMConfig config;
    
    // === –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø ===
    config.max_batch_size = 1;                   // –ë–ï–ó –ë–ê–¢–ß–ò–ù–ì–ê
    config.event_loop_timeout_ms = 0;            // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞
    config.connection_timeout_ms = 500;          // –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    // === –û–ì–†–ê–ù–ò–ß–ï–ù–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
    config.min_buffer_size = 128 * 1024;         // 128KB –º–∏–Ω–∏–º—É–º
    config.max_buffer_size = 2 * 1024 * 1024;    // 2MB –º–∞–∫—Å–∏–º—É–º (–¥–ª—è 8 –ì–ë RAM)
    config.callback_thread_pool_size = 4;        // 4 –ø–æ—Ç–æ–∫–∞ (–¥–ª—è 4 —è–¥–µ—Ä)
    
    // === –ù–ê–î–ï–ñ–ù–û–°–¢–¨ ===
    config.enable_logging = false;
    config.enable_auto_reconnect = true;
    config.enable_activity_tracking = false;     // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    config.enable_performance_counters = false;  // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    config.enable_sequence_verification = true;  // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    
    // === –£–ú–ï–†–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ===
    config.max_callback_timeout_ms = 5;          // –£–º–µ—Ä–µ–Ω–Ω–æ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–ª–ª–±—ç–∫–∏
    config.enable_async_callbacks = true;
    
    // === –ü–û–í–¢–û–†–ù–´–ï –ü–û–ü–´–¢–ö–ò ===
    config.max_retry_attempts = 2;               // –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
    config.initial_retry_delay_ms = 10;          // –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç
    config.max_retry_delay_ms = 100;             // –£–º–µ—Ä–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    return config;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ—â–Ω–æ–≥–æ –ü–ö (8 —è–¥–µ—Ä, 32 –ì–ë RAM)
xshm::XSHMConfig create_high_end_config() {
    xshm::XSHMConfig config;
    
    // === –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø ===
    config.max_batch_size = 1;                   // –ë–ï–ó –ë–ê–¢–ß–ò–ù–ì–ê
    config.event_loop_timeout_ms = 0;            // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞
    config.connection_timeout_ms = 100;          // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    // === –í–´–°–û–ö–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
    config.min_buffer_size = 1 * 1024 * 1024;    // 1MB –º–∏–Ω–∏–º—É–º
    config.max_buffer_size = 16 * 1024 * 1024;   // 16MB –º–∞–∫—Å–∏–º—É–º (–¥–ª—è 32 –ì–ë RAM)
    config.callback_thread_pool_size = 16;       // 16 –ø–æ—Ç–æ–∫–æ–≤ (–¥–ª—è 8 —è–¥–µ—Ä)
    
    // === –ù–ê–î–ï–ñ–ù–û–°–¢–¨ ===
    config.enable_logging = false;
    config.enable_auto_reconnect = true;
    config.enable_activity_tracking = true;
    config.enable_performance_counters = true;
    config.enable_sequence_verification = true;
    
    // === –ë–´–°–¢–†–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ===
    config.max_callback_timeout_ms = 1;          // –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–ª–ª–±—ç–∫–∏
    config.enable_async_callbacks = true;
    
    // === –ü–û–í–¢–û–†–ù–´–ï –ü–û–ü–´–¢–ö–ò ===
    config.max_retry_attempts = 3;
    config.initial_retry_delay_ms = 1;           // –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
    config.max_retry_delay_ms = 20;              // –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    return config;
}

int main() {
    std::cout << "=== XSHM Balanced Configuration for Medium PC ===" << std::endl;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    auto dll_config = create_dll_balanced_config();
    auto app_config = create_app_balanced_config();
    auto low_end_config = create_low_end_config();
    auto high_end_config = create_high_end_config();
    
    std::cout << "\nüìä BALANCED DLL Configuration (4-8 —è–¥–µ—Ä, 8-32 –ì–ë RAM):" << std::endl;
    std::cout << "  Buffer size: " << dll_config.min_buffer_size << " - " << dll_config.max_buffer_size << " bytes" << std::endl;
    std::cout << "  Batch size: " << dll_config.max_batch_size << " (NO BATCHING)" << std::endl;
    std::cout << "  Thread pool: " << dll_config.callback_thread_pool_size << " threads" << std::endl;
    std::cout << "  Event timeout: " << dll_config.event_loop_timeout_ms << "ms (INSTANT)" << std::endl;
    std::cout << "  Callback timeout: " << dll_config.max_callback_timeout_ms << "ms" << std::endl;
    
    std::cout << "\nüìä BALANCED APP Configuration (4-8 —è–¥–µ—Ä, 8-32 –ì–ë RAM):" << std::endl;
    std::cout << "  Buffer size: " << app_config.min_buffer_size << " - " << app_config.max_buffer_size << " bytes" << std::endl;
    std::cout << "  Batch size: " << app_config.max_batch_size << " (NO BATCHING)" << std::endl;
    std::cout << "  Thread pool: " << app_config.callback_thread_pool_size << " threads" << std::endl;
    std::cout << "  Event timeout: " << app_config.event_loop_timeout_ms << "ms (INSTANT)" << std::endl;
    std::cout << "  Callback timeout: " << app_config.max_callback_timeout_ms << "ms" << std::endl;
    
    std::cout << "\nüíª LOW-END Configuration (4 —è–¥—Ä–∞, 8 –ì–ë RAM):" << std::endl;
    std::cout << "  Buffer size: " << low_end_config.min_buffer_size << " - " << low_end_config.max_buffer_size << " bytes" << std::endl;
    std::cout << "  Thread pool: " << low_end_config.callback_thread_pool_size << " threads" << std::endl;
    std::cout << "  Expected throughput: ~1000 messages/sec" << std::endl;
    std::cout << "  Average latency: <0.5ms" << std::endl;
    
    std::cout << "\nüöÄ HIGH-END Configuration (8 —è–¥–µ—Ä, 32 –ì–ë RAM):" << std::endl;
    std::cout << "  Buffer size: " << high_end_config.min_buffer_size << " - " << high_end_config.max_buffer_size << " bytes" << std::endl;
    std::cout << "  Thread pool: " << high_end_config.callback_thread_pool_size << " threads" << std::endl;
    std::cout << "  Expected throughput: ~5000 messages/sec" << std::endl;
    std::cout << "  Average latency: <0.1ms" << std::endl;
    
    std::cout << "\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è:" << std::endl;
    std::cout << "  Expected throughput: ~3000 messages/sec" << std::endl;
    std::cout << "  Peak data rate: ~200 MB/sec" << std::endl;
    std::cout << "  Average latency: <0.2ms" << std::endl;
    std::cout << "  Max message size: 65,000 bytes" << std::endl;
    std::cout << "  Real-time processing: ‚úÖ ENABLED" << std::endl;
    std::cout << "  Batching: ‚ùå DISABLED (–∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É)" << std::endl;
    std::cout << "  Memory usage: ~50-100 MB (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 8-32 –ì–ë RAM)" << std::endl;
    std::cout << "  CPU usage: ~20-30% (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 4-8 —è–¥–µ—Ä)" << std::endl;
    
    return 0;
}
