#include "../xshm.hpp"
#include <iostream>
#include <thread>
#include <chrono>
#include <string>
#include <iomanip>
#include <random>

int main() {
    try {
        std::cout << "=== XSHM Monitoring Client Example ===" << std::endl;
        
        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        xshm::XSHMConfig config;
        config.enable_logging = true;
        config.enable_auto_reconnect = true;
        config.enable_activity_tracking = true;
        config.enable_performance_counters = true;
        config.enable_sequence_verification = true;
        config.max_retry_attempts = 10;
        config.connection_timeout_ms = 5000;
        config.initial_retry_delay_ms = 100;
        
        std::cout << "Connecting to monitoring server..." << std::endl;
        auto client = xshm::AsyncXSHM<uint64_t>::connect("monitoring", config);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        on_connection_established(client, []() {
            std::cout << "‚úÖ Connected to monitoring server!" << std::endl;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        on_connection_failed(client, []() {
            std::cout << "‚ùå Failed to connect to server" << std::endl;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        on_data_received_sxc(client, [](const uint64_t* cmd) {
            if (cmd) {
                std::cout << "üì® Server command: " << *cmd << std::endl;
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫
        on_data_sent_cxs(client, [](const uint64_t* timestamp) {
            if (timestamp) {
                std::cout << "üì§ Sent metric timestamp: " << *timestamp << std::endl;
            }
        });
        
        std::cout << "Client is ready. Press Enter to start monitoring, 'q' to quit..." << std::endl;
        
        std::string input;
        std::string hostname;
        
        std::cout << "Enter hostname: ";
        std::getline(std::cin, hostname);
        if (hostname.empty()) {
            hostname = "Client-" + std::to_string(std::time(nullptr) % 1000);
        }
        
        std::cout << "Press Enter to start monitoring, 'q' to quit..." << std::endl;
        std::getline(std::cin, input);
        
        if (input == "q" || input == "quit") {
            return 0;
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<> delay_dist(1000, 5000);
        
        uint64_t metric_id = 1;
        bool monitoring = true;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        std::thread monitoring_thread([&]() {
            while (monitoring) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º timestamp –º–µ—Ç—Ä–∏–∫–∏
                auto now = std::chrono::system_clock::now();
                auto timestamp = std::chrono::duration_cast<std::chrono::milliseconds>(
                    now.time_since_epoch()).count();
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É
                send_cxs(client, timestamp);
                
                // –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è (1-5 —Å–µ–∫—É–Ω–¥)
                std::this_thread::sleep_for(std::chrono::milliseconds(delay_dist(gen)));
            }
        });
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        while (true) {
            std::cout << "Press Enter to stop monitoring, 'q' to quit: ";
            std::getline(std::cin, input);
            
            if (input == "q" || input == "quit") {
                monitoring = false;
                break;
            }
            
            if (input.empty()) {
                monitoring = false;
                std::cout << "Monitoring stopped." << std::endl;
                break;
            }
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (monitoring_thread.joinable()) {
            monitoring_thread.join();
        }
        
        std::cout << "Client disconnecting..." << std::endl;
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Client Error: " << e.what() << std::endl;
        return 1;
    }
}