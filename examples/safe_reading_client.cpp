#include "../xshm.hpp"
#include <iostream>
#include <thread>
#include <chrono>
#include <string>
#include <random>

int main() {
    try {
        std::cout << "=== XSHM Safe Reading Client Example ===" << std::endl;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π verification
        xshm::XSHMConfig config;
        config.enable_logging = true;
        config.enable_sequence_verification = true;
        config.enable_activity_tracking = true;
        config.connection_timeout_ms = 5000;
        
        std::cout << "Connecting to safe reading server..." << std::endl;
        auto client = xshm::AsyncXSHM<uint32_t>::connect("safe_app", config);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        on_connection_established(client, []() {
            std::cout << "‚úÖ Connected to safe server!" << std::endl;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        on_connection_failed(client, []() {
            std::cout << "‚ùå Failed to connect to server" << std::endl;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —á—Ç–µ–Ω–∏–µ–º
        on_data_received_sxc(client, [](const uint32_t* data) {
            if (data) {
                std::cout << "üì® Received safe data: " << *data << std::endl;
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
                if (*data % 2 == 0) {
                    std::cout << "   ‚úÖ Data integrity verified!" << std::endl;
                } else {
                    std::cout << "   ‚ùå Data integrity check failed!" << std::endl;
                }
            }
        });
        
        std::cout << "Client is ready. Press Enter to start sending data, 'q' to quit..." << std::endl;
        
        std::string input;
        std::getline(std::cin, input);
        
        if (input == "q" || input == "quit") {
            return 0;
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<uint32_t> data_dist(1, 1000);
        std::uniform_int_distribution<> delay_dist(2000, 5000);
        
        bool sending = true;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        std::thread sending_thread([&]() {
            while (sending) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞)
                uint32_t data = data_dist(gen) * 2; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É
                send_cxs(client, data);
                
                // –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è (2-5 —Å–µ–∫—É–Ω–¥)
                std::this_thread::sleep_for(std::chrono::milliseconds(delay_dist(gen)));
            }
        });
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        while (true) {
            std::cout << "Press Enter to stop sending, 'q' to quit: ";
            std::getline(std::cin, input);
            
            if (input == "q" || input == "quit") {
                sending = false;
                break;
            }
            
            if (input.empty()) {
                sending = false;
                std::cout << "Sending stopped." << std::endl;
                break;
            }
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (sending_thread.joinable()) {
            sending_thread.join();
        }
        
        std::cout << "Client disconnecting..." << std::endl;
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Client Error: " << e.what() << std::endl;
        return 1;
    }
}