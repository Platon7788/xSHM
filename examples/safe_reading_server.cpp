#include "../xshm.hpp"
#include <iostream>
#include <thread>
#include <chrono>
#include <string>

int main() {
    try {
        std::cout << "=== XSHM Safe Reading Server Example ===" << std::endl;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π verification
        xshm::XSHMConfig config;
        config.enable_logging = true;
        config.enable_sequence_verification = true;
        config.enable_activity_tracking = true;
        config.max_batch_size = 5;
        
        std::cout << "Creating server with safe reading..." << std::endl;
        auto server = xshm::AsyncXSHM<uint32_t>::create_server("safe_app", 1024, config);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        on_connection_established(server, []() {
            std::cout << "‚úÖ Safe server is ready!" << std::endl;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —á—Ç–µ–Ω–∏–µ–º
        on_data_received_cxs(server, [](const uint32_t* data) {
            if (data) {
                std::cout << "üì® Received data ID: " << *data << std::endl;
                
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ (—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ = –≤–∞–ª–∏–¥–Ω–æ–µ)
                if (*data % 2 == 0) {
                    std::cout << "   ‚úÖ Data integrity verified (even number)!" << std::endl;
                } else {
                    std::cout << "   ‚ùå Data integrity check failed (odd number)!" << std::endl;
                }
            }
        });
        
        std::cout << "Server is running. Press Enter to send data, 'q' to quit..." << std::endl;
        
        uint32_t data_id = 1;
        std::string input;
        
        while (true) {
            std::cout << "Enter data value (or 'q' to quit): ";
            std::getline(std::cin, input);
            
            if (input == "q" || input == "quit") {
                break;
            }
            
            if (!input.empty()) {
                try {
                    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    uint32_t data = static_cast<uint32_t>(std::stoul(input));
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
                    send_sxc(server, data);
                    
                    std::cout << "Safe data " << data << " sent to clients!" << std::endl;
                } catch (const std::exception& e) {
                    std::cout << "Invalid input: " << e.what() << std::endl;
                }
            }
        }
        
        std::cout << "Server shutting down..." << std::endl;
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Server Error: " << e.what() << std::endl;
        return 1;
    }
}