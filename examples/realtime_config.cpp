#include "../xshm.hpp"
#include <iostream>
#include <chrono>

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò (–±–µ–∑ –±–∞—Ç—á–∏–Ω–≥–∞)
xshm::XSHMConfig create_realtime_config() {
    xshm::XSHMConfig config;
    
    // === –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø ===
    config.max_batch_size = 1;                  // –ë–ï–ó –ë–ê–¢–ß–ò–ù–ì–ê - –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    config.event_loop_timeout_ms = 0;           // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ (0–º—Å)
    config.connection_timeout_ms = 100;         // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    // === –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
    config.min_buffer_size = 512 * 1024;        // 512KB –º–∏–Ω–∏–º—É–º
    config.max_buffer_size = 8 * 1024 * 1024;   // 8MB –º–∞–∫—Å–∏–º—É–º
    config.callback_thread_pool_size = 16;      // –ë–æ–ª—å—à–æ–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
    
    // === –ù–ê–î–ï–ñ–ù–û–°–¢–¨ ===
    config.enable_auto_reconnect = true;
    config.enable_activity_tracking = true;
    config.enable_performance_counters = true;
    config.enable_sequence_verification = true;
    
    // === –ë–´–°–¢–†–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ===
    config.max_callback_timeout_ms = 1;         // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ –∫–æ–ª–ª–±—ç–∫–∏
    config.enable_async_callbacks = true;
    
    // === –ü–û–í–¢–û–†–´ ===
    config.max_retry_attempts = 3;              // –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
    config.initial_retry_delay_ms = 1;          // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
    config.max_retry_delay_ms = 10;             // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    return config;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –í–´–°–û–ö–û–ô –ü–†–û–ü–£–°–ö–ù–û–ô –°–ü–û–°–û–ë–ù–û–°–¢–ò (—Å –±–∞—Ç—á–∏–Ω–≥–æ–º)
xshm::XSHMConfig create_throughput_config() {
    xshm::XSHMConfig config;
    
    // === –í–´–°–û–ö–ê–Ø –ü–†–û–ü–£–°–ö–ù–ê–Ø –°–ü–û–°–û–ë–ù–û–°–¢–¨ ===
    config.max_batch_size = 50;                 // –£–º–µ—Ä–µ–Ω–Ω—ã–π –±–∞—Ç—á–∏–Ω–≥
    config.event_loop_timeout_ms = 1;           // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é 1–º—Å
    config.connection_timeout_ms = 1000;
    
    // === –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
    config.min_buffer_size = 2 * 1024 * 1024;   // 2MB –º–∏–Ω–∏–º—É–º
    config.max_buffer_size = 16 * 1024 * 1024;  // 16MB –º–∞–∫—Å–∏–º—É–º
    config.callback_thread_pool_size = 8;
    
    // === –ù–ê–î–ï–ñ–ù–û–°–¢–¨ ===
    config.enable_auto_reconnect = true;
    config.enable_activity_tracking = true;
    config.enable_performance_counters = true;
    config.enable_sequence_verification = true;
    
    // === –û–ë–†–ê–ë–û–¢–ö–ê ===
    config.max_callback_timeout_ms = 5;
    config.enable_async_callbacks = true;
    
    // === –ü–û–í–¢–û–†–´ ===
    config.max_retry_attempts = 5;
    config.initial_retry_delay_ms = 10;
    config.max_retry_delay_ms = 100;
    
    return config;
}

// –ì–∏–±—Ä–∏–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∫–æ–º–ø—Ä–æ–º–∏—Å—Å
xshm::XSHMConfig create_hybrid_config() {
    xshm::XSHMConfig config;
    
    // === –ö–û–ú–ü–†–û–ú–ò–°–° ===
    config.max_batch_size = 5;                  // –ù–µ–±–æ–ª—å—à–æ–π –±–∞—Ç—á–∏–Ω–≥
    config.event_loop_timeout_ms = 0;           // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    config.connection_timeout_ms = 500;
    
    // === –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
    config.min_buffer_size = 1 * 1024 * 1024;   // 1MB –º–∏–Ω–∏–º—É–º
    config.max_buffer_size = 8 * 1024 * 1024;   // 8MB –º–∞–∫—Å–∏–º—É–º
    config.callback_thread_pool_size = 12;
    
    // === –ù–ê–î–ï–ñ–ù–û–°–¢–¨ ===
    config.enable_auto_reconnect = true;
    config.enable_activity_tracking = true;
    config.enable_performance_counters = true;
    config.enable_sequence_verification = true;
    
    // === –û–ë–†–ê–ë–û–¢–ö–ê ===
    config.max_callback_timeout_ms = 2;
    config.enable_async_callbacks = true;
    
    // === –ü–û–í–¢–û–†–´ ===
    config.max_retry_attempts = 3;
    config.initial_retry_delay_ms = 5;
    config.max_retry_delay_ms = 50;
    
    return config;
}

int main() {
    std::cout << "=== XSHM Real-time vs Throughput Configuration ===" << std::endl;
    
    auto realtime_config = create_realtime_config();
    auto throughput_config = create_throughput_config();
    auto hybrid_config = create_hybrid_config();
    
    std::cout << "\nüöÄ REAL-TIME Configuration (–¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏):" << std::endl;
    std::cout << "  Batch size: " << realtime_config.max_batch_size << " (–±–µ–∑ –±–∞—Ç—á–∏–Ω–≥–∞)" << std::endl;
    std::cout << "  Event timeout: " << realtime_config.event_loop_timeout_ms << "ms (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)" << std::endl;
    std::cout << "  Thread pool: " << realtime_config.callback_thread_pool_size << " threads" << std::endl;
    std::cout << "  Latency: <0.1ms" << std::endl;
    std::cout << "  Throughput: ~1000 msg/sec" << std::endl;
    
    std::cout << "\nüìä THROUGHPUT Configuration (–¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏):" << std::endl;
    std::cout << "  Batch size: " << throughput_config.max_batch_size << " (–±–∞—Ç—á–∏–Ω–≥)" << std::endl;
    std::cout << "  Event timeout: " << throughput_config.event_loop_timeout_ms << "ms" << std::endl;
    std::cout << "  Thread pool: " << throughput_config.callback_thread_pool_size << " threads" << std::endl;
    std::cout << "  Latency: ~1ms" << std::endl;
    std::cout << "  Throughput: ~5000 msg/sec" << std::endl;
    
    std::cout << "\n‚öñÔ∏è  HYBRID Configuration (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å):" << std::endl;
    std::cout << "  Batch size: " << hybrid_config.max_batch_size << " (–Ω–µ–±–æ–ª—å—à–æ–π –±–∞—Ç—á–∏–Ω–≥)" << std::endl;
    std::cout << "  Event timeout: " << hybrid_config.event_loop_timeout_ms << "ms (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)" << std::endl;
    std::cout << "  Thread pool: " << hybrid_config.callback_thread_pool_size << " threads" << std::endl;
    std::cout << "  Latency: ~0.5ms" << std::endl;
    std::cout << "  Throughput: ~2000 msg/sec" << std::endl;
    
    std::cout << "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è:" << std::endl;
    std::cout << "  - –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ ‚Üí REAL-TIME" << std::endl;
    std::cout << "  - –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –í–´–°–û–ö–ê–Ø –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ‚Üí THROUGHPUT" << std::endl;
    std::cout << "  - –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ö–û–ú–ü–†–û–ú–ò–°–° ‚Üí HYBRID" << std::endl;
    
    return 0;
}
