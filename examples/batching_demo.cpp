#include "../xshm.hpp"
#include <iostream>
#include <chrono>
#include <vector>

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞—Ç—á–∏–Ω–≥–∞
void demonstrate_batching() {
    std::cout << "=== XSHM Batching Demonstration ===" << std::endl;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
    xshm::XSHMConfig config;
    config.max_batch_size = 5;  // –ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    config.event_loop_timeout_ms = 100;  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 100–º—Å
    
    auto server = xshm::AsyncXSHM<uint32_t>::create_server("batching_demo", 1024, config);
    
    // –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    int sent_count = 0;
    on_data_sent_sxc(server, [&](const uint32_t* data) {
        if (data) {
            sent_count++;
            std::cout << "üì§ Sent message #" << *data << " (total sent: " << sent_count << ")" << std::endl;
        }
    });
    
    std::cout << "Sending 20 messages with batch_size=5..." << std::endl;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    for (int i = 1; i <= 20; i++) {
        send_sxc(server, static_cast<uint32_t>(i));
        std::cout << "üìù Queued message #" << i << std::endl;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        std::this_thread::sleep_for(std::chrono::milliseconds(50));
    }
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
    
    std::cout << "Total messages sent: " << sent_count << std::endl;
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –±–∞—Ç—á–∏–Ω–≥–∞
void demonstrate_no_batching() {
    std::cout << "\n=== XSHM No Batching Demonstration ===" << std::endl;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ –±–∞—Ç—á–∏–Ω–≥–∞
    xshm::XSHMConfig config;
    config.max_batch_size = 1;  // –ë–µ–∑ –±–∞—Ç—á–∏–Ω–≥–∞
    config.event_loop_timeout_ms = 1;  // –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    
    auto server = xshm::AsyncXSHM<uint32_t>::create_server("no_batching_demo", 1024, config);
    
    // –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    int sent_count = 0;
    on_data_sent_sxc(server, [&](const uint32_t* data) {
        if (data) {
            sent_count++;
            std::cout << "üì§ Sent message #" << *data << " (total sent: " << sent_count << ")" << std::endl;
        }
    });
    
    std::cout << "Sending 20 messages with batch_size=1..." << std::endl;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    for (int i = 1; i <= 20; i++) {
        send_sxc(server, static_cast<uint32_t>(i));
        std::cout << "üìù Queued message #" << i << std::endl;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        std::this_thread::sleep_for(std::chrono::milliseconds(50));
    }
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
    
    std::cout << "Total messages sent: " << sent_count << std::endl;
}

int main() {
    try {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
        demonstrate_batching();
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –±–∞—Ç—á–∏–Ω–≥–∞
        demonstrate_no_batching();
        
        std::cout << "\n=== Batching Benefits ===" << std::endl;
        std::cout << "‚úÖ With batching: Fewer system calls, better throughput" << std::endl;
        std::cout << "‚ùå Without batching: More system calls, higher overhead" << std::endl;
        
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Error: " << e.what() << std::endl;
        return 1;
    }
}
